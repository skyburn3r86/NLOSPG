% Generated through Matlab
% Author:           Killian Keller
% E-Mail:           killian.keller@ief.ee.ethz.ch
% Organization:     ETHZ ITET IEF
    
function [model] = Materials(model,varargin)
%MATERIALS Creates the Materials for the Model.

    % Define Material Parameters
    Selections = varargin{1}
    selectionNames=fieldnames(Selections);
    
    % Define material properties for ElectroDynamics argument 
    for jj = 1:length(selectionNames)        
        if strcmp(selectionNames{jj}, 'OEO')
            models.(['n_' selectionNames{jj} '_Pockels']) = ['real(sqrt(eps' selectionNames{jj} '(wl)+i*eps' selectionNames{jj} '(wl)))'];
            models.(['k_' selectionNames{jj} '_Pockels']) = ['real(sqrt(eps' selectionNames{jj} '(wl)+i*eps' selectionNames{jj} '(wl)))'];           
        end
            models.(['n_' selectionNames{jj}]) = ['real(sqrt(eps' selectionNames{jj} '(wl)+i*eps' selectionNames{jj} '(wl)))'];
            models.(['k_' selectionNames{jj}]) = ['real(sqrt(eps' selectionNames{jj} '(wl)+i*eps' selectionNames{jj} '(wl)))'];                  
    end
    
%     models = struct(...
%         'n_substrate', 'real(sqrt(epsSubstrate(wl)+i*epsSubstrate(wl)))',...
%         'k_substrate', 'imag(sqrt(epsSubstrate(wl)+i*epsSubstrate(wl)))',...
%         'n_metal_1', 'real(sqrt(epsMetal_1_re(wl)+i*epsMetal_1_im(wl)))',...
%         'k_metal_1', 'imag(sqrt(epsMetal_1_re(wl)+i*epsMetal_1_im(wl)))',...
%         'n_metal_2', 'real(sqrt(epsMetal_2_re(wl)+i*epsMetal_2_im(wl)))',...
%         'k_metal_2', 'imag(sqrt(epsMetal_2_re(wl)+i*epsMetal_2_im(wl)))',...
%         'n_photonicWG', 'real(sqrt(epsPhotonicWG_re(wl)+i*epsPhotonicWG_im(wl)))',...
%         'k_photonicWG', 'imag(sqrt(epsPhotonicWG_re(wl)+i*epsPhotonicWG_im(wl)))',...
%         'n_OEO_oAxis', 'real(sqrt(epsrOrganics(wl)+i*epsiOrganics(wl)))', ...
%         'k_OEO', 'imag(sqrt(epsrOrganics(wl)+i*epsiOrganics(wl)))', ...
%         'n_OEO_eoAxis', 'real(sqrt(epsrOrganics(wl)+i*epsiOrganics(wl)))-0.5*real(sqrt(epsrOrganics(wl)+i*epsiOrganics(wl)))^3*r33*es.Ey', ...
%         'k_OEO_eoAxis', 'imag(sqrt(epsrOrganics(wl)+i*epsiOrganics(wl)))', ...
%         'n_air', '1', ...
%         'k_air', '0');
    % Define Parameters for ElectroStatics
    ES = struct(...
        'eps_Al2O3', '9.8',...
        'eps_OEO', '5.6');

    for ii = 1:length(selectionNames)
        if ~isempty(strfind(materials.(name), '.txt'))
        name = selectionNames{ii};
        if strcmp(name, 'OEO')
            no = models.(['n_' name]);
            ne = models.(['n_' name '_Pockels']);
        else            
            no = models.(['n_' name]);
            ne = no;
        end
            k = models.(['k_' name]);
        model_dummy = model.component('comp1').material.create(['mat' name], 'Common');
        model_dummy.propertyGroup.create('RefractiveIndex', 'Refractive index');
        model_dummy.label(name);
        model_dummy.propertyGroup('RefractiveIndex').set('n', '');
        model_dummy.propertyGroup('RefractiveIndex').set('ki', '');
        model_dummy.propertyGroup('RefractiveIndex').set('n', {no '0' '0' '0' ne' '0' '0' '0' no});
        model_dummy.propertyGroup('RefractiveIndex').set('ki', {k '0' '0' '0' k '0' '0' '0' k});
        objects = mphgetselection(model.selection(['geom1_' selectionNames{ii} '_dom']))
        model_dummy.selection.set(objects.entities);
           
        if strcmp(name, 'Al2O3') || strcmp(name, 'OEO')
            eps = ES.(['eps_' name]);
            model.component('comp1').material(['mat' name]).propertyGroup('def').set('relpermittivity', {eps});
        end
        end
    end
end

