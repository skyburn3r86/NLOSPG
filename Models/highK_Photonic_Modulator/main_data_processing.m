% Generated by/Last edit by
% Author:           Christian Haffner/Christian Haffner
% E-Mail:           chrisitan.haffner@ief.ee.ethz.ch
% Organization:     ETHZ ITET IEF

%% Data Evaluation
close all

% checks if parameters are available in worksepace. if false -> Opens load
% dialog
if ~exist('sim_results') || ~exist('param_list')  || ~exist('sim_results')
    file_str = uigetfile({'*.mat'; '.json'}); 
end

%% highlight available simulation results
% availabe simulation results
available_sim_results = [];
for jj = 1:length(sim_results{1})
    available_sim_results = [available_sim_results ',  ' sim_results{1}(jj).str];
end
fprintf(['************************************************************* \n'...
    'Result Names:' available_sim_results '   !\n'...
    '************************************************************* \n']);

% availabe parameters
available_param = [];
for jj = 1:length(param_list.str)
    available_param = [];
    dummy_para_list_values = unique(param_list.values(:,jj));
    for ii = 1:length(dummy_para_list_values)
        available_param = [available_param num2str(dummy_para_list_values(ii))];
        if ii < length(dummy_para_list_values)
            available_param = [available_param ', '];
        end
    end
    available_param = [param_list.str{jj} ': [' available_param ']' param_list.unit{jj}];
fprintf(['Parameter - ' available_param '\n']);
end
fprintf('************************************************************* \n');


%% search parameter list
close all
% define rpint options
size_figure =  [5 5 15 15];
para_str =  {'wOEO', 'eps_High_k' ,'hHigh_k', 'hWG', 'wWG', 'wl', 'wElectrode'};
para_value = {[], [10 100 1000] , [], [], [], [], []};
para_unit = {'[m]', '' , '[m]', '[m]', '[m]', '[m]'};
legend_flag = 1;

% para_str =  {'wOEO', 'hWG' ,'hHigh_k', 'wWG', 'eps_High_k', 'wl', 'wElectrode'};
% para_value = {[], [] , [], [], [], [100], []};
% para_unit = {'[m]', '' , '[m]', '[m]', '[m]', '[m]'};
% legend_flag = 1;

[reduced_results, data_axis, reduced_parameter, error_prompt] = searchLISTforFOM(sim_results, param_list,'data_str', 'C_reduced',...
    'para_str', para_str, 'para_value', para_value, 'FOM_minORmax', 'max');
disp(error_prompt);

plotResultList(reduced_results, data_axis, reduced_parameter, ...
    'data_str', 'g_0', 'position', size_figure,...
    'para_str', para_str, 'legend_flag', legend_flag, 'save', [save_folder '/']);

plotResultList(reduced_results, data_axis, reduced_parameter, ...
    'data_str', 'Q', 'position', size_figure,...
    'para_str', para_str, 'legend_flag', legend_flag, 'save', [save_folder '/']);

plotResultList(reduced_results, data_axis, reduced_parameter, ...
    'data_str', 'C_reduced', 'position', size_figure,...
    'para_str', para_str, 'legend_flag', legend_flag, 'save', [save_folder '/']);

plotParameterList(reduced_parameter, data_axis, param_list,...
    'position', size_figure,...
    'para_str', para_str, 'legend_flag', legend_flag, 'save', [save_folder '/']);

%% plotting certain field profiles
% para_value = {[], [] , [2e-7], [1e-7], [4e-7], [3e-6]};
loadFieldProfile([save_folder '/FieldProfiles/'], param_list, list_vector, 'figure_number', 10)