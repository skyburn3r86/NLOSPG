% Generated by/Last edit by
% Author:           Christian Haffner/Christian Haffner
% E-Mail:           chrisitan.haffner@ief.ee.ethz.ch
% Organization:     ETHZ ITET IEF

%% Funciton: reads out the data(dataYZ_str) from the result list defined by
% paraX.str (and) paraYstr (optional). 
% -> Searches for optimal vlaue in higher dimensions
% If nr_colums > 1(only paraX.str defined)
% If nr_colums > 2(only paraX.str and paraY.str defined)
% list (defined by the rows of parameters_list_values.
% No interpolation possible

function plotResultList(sim_results, para_list, varargin) 

%% input parameters:
% result_List = Matrix (row = nr of simultion, column Y- result y)
% para_list = Matrix (row = nr of  simultionn, column Y- para y)
% VARARGIN options (extend on need)
% 1. 'data_str' - string needs to match results indices
% 2. 'data_FOM' - string of either 'max' or 'min' to search for optimal
% sol. in parameter space
% 3. 'para_str' - cell of strings needs to match results. 
        % 1st element = X-axis,  
        % 2nd element = Y-axis if length(values) > 1  
        % 3rd element = limits by defined values parameter spaced search for optimal solution 
% 4. 'para_values' (Optional) - cell of arrays containg parameters of interest. 
        % Cell length has to match cel length para_str 

% Processing of variable inputs-------------------------------------
if round(length(varargin)/2)~=length(varargin)/2
    error('Arguments needs propertyName/propertyValue pairs')
end
% scans through varagin for wavelength. -1 and +1 of for loop due to
% option/value pairs
for list_loop = 1:length(varargin)-1
    if ~iscell(varargin{list_loop})
        switch varargin{list_loop}
            case 'data_str'
                dataYZ.str = varargin{list_loop+1};
                for idx = 1:length(sim_results{1,1})
                    if (strcmp(dataYZ.str, sim_results{1}(idx).str))
                        data_colmn = idx;
                        str_data = sim_results{1}(idx).str;
                        str_unit = sim_results{1}(idx).unit;
                    end
                end
            case 'data_FOM'
                data_FOM.str = varargin{list_loop+1};
            case 'para_str'
                cell_param.str = varargin{list_loop+1};
                for idx_para_str = 1:length( cell_param.str)
                    colm_in_para_list(idx_para_str) = find(strcmp(para_list.str, cell_param.str{idx_para_str}));
                    if isempty(colm_in_para_list(idx_para_str))
                        error(['Call of funciton plotResultList' cell_param.str 'does not match a para_list.str']);
                    else
                        % saves the parameter name
                        para{idx_para_str}.str = cell_param.str{idx_para_str};
                    end
                end
            case 'para_values'
                cell_param.values = varargin{list_loop+1};
                for idx_para_str = 1:length( cell_param.str)
                    % uses default parameter value if not defined = empty
                    % cell element
                    if isempty(cell_param.values{idx_para_str})
                        para{idx_para_str}.values =  unique(para_list.values(:,colm_in_para_list(idx_para_str)),'stable');
                    else
                        para{idx_para_str}.values = cell_param.values{idx_para_str};
                    end
                end
        end
    end
end

%% Extracting data from list
list_vector = ones(length(para_list.values(:,1)),1);
for idx_parameter = 1:length(para)
    colm_list = colm_in_para_list(idx_parameter);
    for idx_list = 1:length(para_list.values(:,colm_list))
        rel_error = abs((para{idx_parameter}.values - para_list.values(idx_list,colm_list))./para_list.values(idx_list,colm_list));
        row_vector(idx_list,1) = ~isempty(find(rel_error < 1e-3));
    end
    list_vector = list_vector & row_vector;
end
% % consider only values that have been found for all parameters of interest
% list_vector = floor(sum(row_vector)/lenght(para.values)); 
list_vector  = list_vector(1:4)
counter = 1;
for idx_row_list = 1:length(list_vector)
    if list_vector(idx_row_list)
        result_struct = sim_results{idx_row_list};
        result_struct = result_struct(data_colmn);
        data_plot(counter,1) = result_struct.value;
        para_plot(counter,:) = para_list.values(idx_row_list,:);
        counter = counter + 1;
    end
end

% 1D plot if second argument has less then 5 values
if length(para{2}.values) < 5
    %1D Plot
    % searching for all list values with para1 value
    for jj = 1:length(para{1}.values)
        para_1_value = para{1}.values;
        for list_loop = 1:length(para_plot)  
            rel_error = abs((para_1_value(jj) - para_plot(list_loop,colm_in_para_list(1)))./para_plot(list_loop,colm_in_para_list(1)));              
            if ~isempty(find(rel_error < 1e-3))
                if strcmp(data_FOM.str, 'max')
                    try
                        dummy_value = max(data_plot(list_loop), dummy_value);
                    catch
                        dummy_value = data_plot(list_loop);
                    end
                elseif strcmp(data_FOM.str, 'min')
                    try
                        dummy_value = min(data_plot(list_loop), dummy_value);
                    catch
                        dummy_value = data_plot(list_loop);
                    end
                end
            end
        end
        dataY(jj) = dummy_value;
    end
    dataX = para{1}.values;
    % generating 1D plot
    figure;
%     'to do' add linear plot
    plot(dataX, dataY);
    title('');
    xlabel(strrep([ para_list.str{colm_in_para_list(1)} ' ' para_list.unit{colm_in_para_list(1)} ],'_',''));
    ylabel(strrep([ str_data ' ' str_unit],'_',''));
else
    %2D plot for jj = 1:length(para{1}.values)
    for jj = 1:length(para{1}.values)
        para_1_value = para{1}.values;
        for list_loop = 1:length(para_plot)
            rel_error_para1 = abs((para_1_value(jj) - para_plot(list_loop,colm_in_para_list(1)))./para_plot(list_loop,colm_in_para_list(1)));
            if ~isempty(find(rel_error_para1 < 1e-3))               
                for kk = 1:length(para{2}.values)
                    para_2_value = para{2}.values;
                    rel_error_para2 = abs((para_2_value(jj) - para_plot(list_loop,colm_in_para_list(2)))./para_plot(list_loop,colm_in_para_list(2)));
                    if ~isempty(find(rel_error_para1 < 1e-3))
                        if strcmp(data_FOM.str, 'max')
                            try
                                dummy_value = max(data_plot(list_loop), dummy_value);
                            catch
                                dummy_value = data_plot(list_loop);
                            end
                        elseif strcmp(data_FOM.str, 'min')
                            try
                                dummy_value = min(data_plot(list_loop), dummy_value);
                            catch
                                dummy_value = data_plot(list_loop);
                            end
                        end
                    end
                end
            end
        end
        dataY(jj) = dummy_value;
    end
    dataX = para{1}.values;
    % generating 1D plot
    figure
%     'to do' add linear plot
    plot(dataX, dataY)
    title('')
    xlabel(strrep([ para_list.str{colm_in_para_list(1)} ' ' para_list.unit{colm_in_para_list(1)} ],'_',''))
    ylabel(strrep([ str_data ' ' str_unit],'_',''))
end
        
end